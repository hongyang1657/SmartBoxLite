apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "fitme.ai"
        minSdkVersion 17
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.3.0'
    testCompile 'junit:junit:4.12'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    compile 'com.squareup.retrofit2:converter-gson:2.3.0'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.3.0'
    compile 'com.squareup.okio:okio:1.13.0'
    compile 'com.squareup.okhttp3:okhttp:3.8.0'
    compile 'io.reactivex:rxjava:1.1.9'
    compile 'io.reactivex:rxandroid:1.2.1'
    compile files('libs/sai_sdk.jar')
    compile files('src/main/jniLibs/libLet.jar')
    compile files('src/main/jniLibs/Msc.jar')
    compile files('src/main/jniLibs/Sunflower.jar')
    compile project(path: ':SinVoiceDemo')
}


buildscript {
    repositories {
        jcenter();
    }
    dependencies {
        classpath 'org.ajoberstar:grgit:1.1.0'
    }
}

/*ext {
    git = org.ajoberstar.grgit.Grgit.open(file('.').getParentFile())
    revision = git.head().id
    println('revision = ' + revision)
    def directory = file('.').getParentFile().getPath() + "/package"
    println(directory)
    def txtFileInfo = []
    txtFileInfo << revision
    write2File(directory, "android_version", ".txt", txtFileInfo)
}*/

public void write2File(def directory, def fileName, def extension, def infoList) {
    File dir = new File("$directory")
    if (!dir.exists()) {
        dir.mkdirs()
    }
    File file = new File("$directory/$fileName$extension")
    if (file.exists())
        file.delete();
    infoList.each {
        file << ("${it}\n")
    }
}